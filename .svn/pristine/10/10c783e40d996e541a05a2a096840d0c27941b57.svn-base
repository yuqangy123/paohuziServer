local trans = {}


local gameCenter
local msgReceiver
local R
local MSG = {}

local function getAllPids()
	local pids = {}
	local players = gameCenter:get_players()
	for i=1, R.MAX_PLAYER_COUNT do
		pids[i] = players.player[i].pid
	end
	return pids
end
		
--0成功 1人员已满 2游戏进行中
function MSG.playerEnter(res, roomId, enterPid, roomasterPid, gameState)
	local pack = {code=res, enterPid=enterPid, pid="", nickname="", ip="", sex = "", headimgurl = "", site="", ready="", score = "", totalScore = "", winCount="", zzCount="", dpCount="", gameConfig="", roomid = roomId}
	
	
	
	if res == 0 then
		local players = gameCenter:get_players()
		for i=1, R.MAX_PLAYER_COUNT do
			pack.pid = pack.pid .. players.player[i].pid .. ","
			pack.nickname = pack.nickname .. players.player[i].nickName .. ","
			pack.ip = pack.ip .. players.player[i].ip .. ","
			pack.sex = pack.sex .. players.player[i].sex .. ","
			pack.headimgurl = pack.headimgurl .. players.player[i].headimgurl .. ","
			pack.site = pack.site .. players.player[i].site .. ","
			pack.ready = pack.ready .. (players.player[i]:isReady() and "1" or "0") .. ","
			pack.score = pack.score .. players.player[i]:getScore() .. ","
			pack.totalScore = pack.totalScore .. players.player[i]:getTotalScore() .. ","
			pack.winCount = pack.winCount .. players.player[i].winCount .. ","
			pack.zzCount = pack.zzCount .. players.player[i].zhongzhuangCount .. ","
			pack.dpCount = pack.dpCount .. players.player[i].dianpaoCount .. ","
		end
			
		pack.pid = string.sub(pack.pid, 1, string.len(pack.pid)-1)
		pack.nickname = string.sub(pack.nickname, 1, string.len(pack.nickname)-1)
		pack.ip = string.sub(pack.ip, 1, string.len(pack.ip)-1)
		pack.site = string.sub(pack.site, 1, string.len(pack.site)-1)
		pack.ready = string.sub(pack.ready, 1, string.len(pack.ready)-1)
		pack.score = string.sub(pack.score, 1, string.len(pack.score)-1)
		pack.totalScore = string.sub(pack.totalScore, 1, string.len(pack.totalScore)-1)
		pack.winCount = string.sub(pack.winCount, 1, string.len(pack.winCount)-1)
		pack.zzCount = string.sub(pack.zzCount, 1, string.len(pack.zzCount)-1)
		pack.dpCount = string.sub(pack.dpCount, 1, string.len(pack.dpCount)-1)
		
		pack.gameConfig = gameCenter:getGameConfig()
		pack.roomid = roomId
		pack.roommaster = roomasterPid
		pack.gamestate = gameState
	end
	
	return pack
end

function MSG.playerReady(pid)
	return {pid=pid}
end

function MSG.playerChat(pid,faceid)
	return {faceid=faceid,pid=pid}
end

function MSG.startGame()
	return {}
end

function MSG.playerInitCards(zpid, remainSystemCards, isReload, curPayPid)
	local pack = {}
		
	local mostCards = gameCenter:get_mostCards()
	local idsDesc = ""
	local handcard = ""
	local rulecard = ""
	local singlecard = ""
	for k,v in pairs(mostCards) do
		idsDesc = idsDesc .. v:msgString() .. ","
	end
	idsDesc = string.sub(idsDesc, 1, string.len(idsDesc)-1)
	
	
	local players = gameCenter:get_players()
	for i=1, R.MAX_PLAYER_COUNT do
		local cards = players.player[i]:getHandCards()
		local handDesc = ""
		for k,v in pairs(cards) do
			handDesc = handDesc .. v.id .. "_"
		end
		if string.len(handDesc) > 0  then handDesc = string.sub(handDesc, 1, string.len(handDesc)-1) end
		handcard = handcard .. handDesc .. ","
	end
	if string.len(handcard) > 0 then handcard = string.sub(handcard, 1, string.len(handcard)-1) end
	
	for i=1, R.MAX_PLAYER_COUNT do
		local cards = players.player[i]:getShowRuleCards()
		local ruleDesc = ""
		print_lua_table(cards)
		for rname,rlist in pairs(cards) do
			ruleDesc = ruleDesc .. rname .. ":"
			for k,rcards in pairs(rlist) do
				for kk,c in pairs(rcards) do
					ruleDesc = ruleDesc .. c .. "_"
				end
				ruleDesc = string.sub(ruleDesc, 1, string.len(ruleDesc)-1)
				ruleDesc = ruleDesc .. "-"
			end
			ruleDesc = string.sub(ruleDesc, 1, string.len(ruleDesc)-1)
			ruleDesc = ruleDesc .. "+"
		end
		ruleDesc = string.sub(ruleDesc, 1, string.len(ruleDesc)-1)
		rulecard = rulecard .. ruleDesc .. ","
	end
	rulecard = string.sub(rulecard, 1, string.len(rulecard)-1)
	
	for i=1, R.MAX_PLAYER_COUNT do
		local cards = players.player[i]:getShowSingleCards()
		local singleDesc = ""
		for k,v in pairs(cards) do
			singleDesc = singleDesc .. v.id .. "_"
		end
		if string.len(singleDesc) > 0  then singleDesc = string.sub(singleDesc, 1, string.len(singleDesc)-1) end
		singlecard = singlecard .. singleDesc .. ","
	end
	singlecard = string.sub(singlecard, 1, string.len(singlecard)-1)
	
	pack.pids = idsDesc
	pack.hand = handcard
	pack.rule = rulecard
	pack.single = singlecard
	pack.zhuangpid = zpid
	pack.remainsystemcards = remainSystemCards
	pack.reload = isReload and true or false
	pack.curPayPid = curPayPid or 0
	
	return pack
end

function MSG.payCardSystem(data)
	--{pid=players.player[curPaysite].pid, card=paycard}
	local pack={cid=data.card, pid=data.pid, show=data.show and true or false}
	return pack
end

function MSG.turnPlayer(pid)
	local pack = {pid=pid}
	return pack
end

function MSG.payCardPlayer(data)
	local pack={pid=data.pid, cid=data.card, show=data.show and true or false}
	return pack
end

function MSG.ruleCardsPossible(pid, data)
	local pack = {}
	
	local rule = ""
	local cid = ""
	local ocid = ""
	for k,v in pairs(data) do
		rule = rule .. v.rule .. ","
		
		local citem = ""
		local cs = ""
		for kk,vv in pairs(v.cards) do
			for kkk,vvv in pairs(vv) do
				cs = cs .. vvv .. "_"
			end
			if string.len(cs) > 0 then cs = string.sub(cs, 1, string.len(cs)-1) end
			cs = cs .. "-"
		end
		if string.len(cs) > 0 then cs = string.sub(cs, 1, string.len(cs)-1) end
		cid = cid .. cs .. ","
		
		ocid = ocid .. v.othercard .. ","
	end
	if string.len(rule) > 0 then rule = string.sub(rule, 1, string.len(rule)-1) end
	if string.len(cid) > 0 then cid = string.sub(cid, 1, string.len(cid)-1) end
	if string.len(ocid) > 0 then ocid = string.sub(ocid, 1, string.len(ocid)-1) end
	
	pack.pid = pid
	pack.rule = rule
	pack.cid = cid
	pack.ocid = ocid
	
	return pack, pid
end

--data:{pid=pid, rule=R.rule.Kan, cards=v}
function MSG.payRuleCardPlayer(data)
	local pack={pid=data.pid, cid="", rule=data.rule, othercard=data.othercard}
	
	for k,v in pairs(data.cards) do
		pack.cid = pack.cid .. v .. ","
	end
	if string.len(pack.cid) > 0  then pack.cid = string.sub(pack.cid, 1, string.len(pack.cid)-1) end
	
	return pack
end

function MSG.payBill(data)
	local pack={}
	
	pack.yieldPid = data.yieldPid
	pack.yieldScore = data.yieldScore
	local payBills = ""
	for k,v in pairs(data.payBills) do
		payBills = payBills .. v[1] .. "_" .. v[2] .. ","
	end
	if string.len(payBills) > 0 then payBills = string.sub(payBills, 1, string.len(payBills)-1) end
	pack.payBills = payBills
	
	return pack
end

function MSG.hupai(pid, rule, winCard, dpPid, lzCnt, gameCnt, allCards, payIndex)
	local pack={pid=pid, rule=rule, hupaiCard=winCard, dpPid=dpPid, lianzhuangCount=lzCnt, gameCount=gameCnt}
	
	local remainCards = ""
	for i=payIndex, #allCards do
		remainCards = remainCards .. allCards[i].id .. ","
	end
	if string.len(remainCards) > 0 then remainCards = string.sub(remainCards, 1, string.len(remainCards)-1) end
	pack.remaincards = remainCards
	
	return pack
end

function MSG.gameFinish()
	local pack={}
	return pack
end

function MSG.masterCheckoutRoom()
	local pack={}
	return pack
end

function MSG.wufuBaojing(pid)
	return {pid=pid}
end

function MSG.canWufuBaojing(pid)
	local pack = {}
	return pack, pid
end

function MSG.playerOnlineChange(pid, isonline)
	return {pid=pid, code = isonline and 0 or 1}
end

function trans:setR(rr)
	R = rr
end

function trans:setGameCenter(gamec)
	gameCenter = gamec
end

function trans:setMsgReceiver(receiver)
	msgReceiver = receiver
end




function trans:msg(msgid, ...)
	local f = assert(MSG[msgid])
	local pack, pid = f(...)
	
	msgReceiver(msgid, pack, pid)
end

return trans
