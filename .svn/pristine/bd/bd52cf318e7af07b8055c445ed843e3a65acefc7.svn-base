local skynet = require "skynet"
require "skynet.manager"    -- import skynet.register
local mysql = require "mysql"
local db = nil
local mutexLock = require "skynet.queue"
local cs = mutexLock()

local function dump(obj)
    local getIndent, quoteStr, wrapKey, wrapVal, dumpObj
    getIndent = function(level)
        return string.rep("\t", level)
    end
    quoteStr = function(str)
        return '"' .. string.gsub(str, '"', '\\"') .. '"'
    end
    wrapKey = function(val)
        if type(val) == "number" then
            return "[" .. val .. "]"
        elseif type(val) == "string" then
            return "[" .. quoteStr(val) .. "]"
        else
            return "[" .. tostring(val) .. "]"
        end
    end
    wrapVal = function(val, level)
        if type(val) == "table" then
            return dumpObj(val, level)
        elseif type(val) == "number" then
            return val
        elseif type(val) == "string" then
            return quoteStr(val)
        else
            return tostring(val)
        end
    end
    dumpObj = function(obj, level)
        if type(obj) ~= "table" then
            return wrapVal(obj)
        end
        level = level + 1
        local tokens = {}
        tokens[#tokens + 1] = "{"
        for k, v in pairs(obj) do
            tokens[#tokens + 1] = getIndent(level) .. wrapKey(k) .. " = " .. wrapVal(v, level) .. ","
        end
        tokens[#tokens + 1] = getIndent(level - 1) .. "}"
        return table.concat(tokens, "\n")
    end
    return dumpObj(obj, 0)
end

local function test2( db)
    local i=1
    while true do
        local    res = db:query("select * from cats order by id asc")
        print ( "test2 loop times=" ,i,"\n","query result=",dump( res ) )
        res = db:query("select * from cats order by id asc")
        print ( "test2 loop times=" ,i,"\n","query result=",dump( res ) )

        skynet.sleep(1000)
        i=i+1
    end
end
local function test3(db)
    local i=1
    while true do
        local    res = db:query("select * from cats order by id asc")
        print ( "test3 loop times=" ,i,"\n","query result=",dump( res ) )
        res = db:query("select * from cats order by id asc")
        print ( "test3 loop times=" ,i,"\n","query result=",dump( res ) )
        skynet.sleep(1000)
        i=i+1
    end
end


local userIDSerial = 0

local table_players = "players"
local table_playerdata = "playerData"

local table_user = "user"
local table_iddb = "iddb"
local table_roomRecord = "roomRecord"

local CMD = setmetatable({}, { __gc = function() netpack.clear(queue) end })

local cache = {
	players = {},
}
function string.split(input, delimiter)
    if not input or input == "" then
        return {}
    end
    input = tostring(input)
    delimiter = tostring(delimiter)
    if (delimiter=='') then return false end
    local pos,arr = 0, {}
    -- for each divider found
    for st,sp in function() return string.find(input, delimiter, pos, true) end do
        table.insert(arr, string.sub(input, pos, st - 1))
        pos = sp + 1
    end
    table.insert(arr, string.sub(input, pos))
    return arr
end


function CMD.open( source, conf )
end

function CMD.close()
end


function CMD.gameRecord(pid)
	local sql = "select * from " .. table_players .. " where pid = \'" .. v.pid .. "\'"
	local res = db:query(sql)
	
	local record = {}
	local rids = string.split(res[1].roomids, ",")
	for k,v in pairs(rids) do
		sql = "select * from " .. table_roomRecord .. " where roomid = \'" .. v .. "\'"
		res = db:query(sql)
		record[#record+1] = {}
		record[#record].times = res[1].times
		record[#record].rid = tonumber(v)
		record[#record].p1name = res[1].p1name
		record[#record].p1score = res[1].p1score
		record[#record].p2name = res[1].p2name
		record[#record].p2score = res[1].p2score
		record[#record].p3name = res[1].p3name
		record[#record].p3score = res[1].p3score
		record[#record].p4name = res[1].p4name
		record[#record].p4score = res[1].p4score		
	end
	return record
end

function CMD.gameFinish(playInfo, roomInfo)
	cs(function() 	
		local sql
		local res
		
		sql = string.format("insert into %s values('%d','%s','%s','%s','%s','%s','%s','%s','%s','%s','%s');", table_roomRecord, 
			roomInfo.rid, roomInfo.js, roomInfo.zz, os.date(),
			playInfo[1].name, playInfo[1].score, playInfo[2].name, playInfo[2].score,
			playInfo[3].name, playInfo[3].score, playInfo[4].name, playInfo[4].score)
		db:query(sql)
		
		for k,v in pairs(playInfo) do
			sql = "select * from " .. table_players .. " where pid = \'" .. v.pid .. "\'"
			res = db:query(sql)
			if string.len(res[1].roomids) > 0 then res[1].roomids = res[1].roomids .. "," end
			res[1].roomids = res[1].roomids .. roomInfo.rid
			while(true) do
				if string.len(res[1].roomids) > 1024 then
					res[1].roomids = string.sub(string.find(res[1].roomids, ",")+1)
				else
					break
				end
			end
			
			sql = "update " .. table_players .. " set roomids=" .. res[1].roomids .." where pid=" .. v.pid
			db:query(sql)
		end
	end)
end

function CMD.playerLoginWx(openid, nickname)
	cs(function() 	
		if not openid then return  false end
		
		if cache.players[openid] then
			if cache.players[openid].nickname == nickname then
				return cache.players[openid].pid
			end
		end
		
		local sql = "select * from " .. table_players .. " where openid = \'" .. openid .. "\'"
		res = db:query(sql)
		if #res == 0 then
			sql = "select * from " .. table_iddb
			res = db:query(sql)
			res[1].pid = res[1].pid + 1
			sql = "update " .. table_iddb .. " set pid=" .. res[1].pid .." where roomid=" .. res[1].roomid
			db:query(sql)
			local newpid = res[1].pid
			
			sql = string.format("insert into %s values('%d','%s','%s','')", table_players, newpid, openid, nickname)
			db:query(sql)
			
			cache.players[openid] = {nickname=nickname, pid=newpid}
		else
			cache.players[openid] = {nickname=res[1].nickname, pid=res[1].pid}
			if cache.players[openid].nickname ~= nickname then
				sql = "update " .. table_players .. " set name=" .. nickname .." where pid=" .. cache.players[openid].pid
				db:query(sql)
				cache.players[openid].nickname = nickname
			end
		end
		require "functions"
		print_lua_table(cache.players[openid])
		return cache.players[openid].pid
	end)
end

function CMD.getNewRoomId()
	cs(function() 	
		local sql = "select * from " .. table_iddb
		local res = db:query(sql)
		res[1].roomid = res[1].roomid + 1
		sql = "update " .. table_iddb .. " set roomid=" .. res[1].roomid .." where pid=" .. res[1].pid
		db:query(sql)
		
		return res[1].roomid
	end)
end

skynet.start(function()
    print("db_service start")

	local function on_connect(db)
		db:query("set charset utf8");
	end
	db=mysql.connect({
		host="127.0.0.1",
		port=3306,
		database="rrphDB",
		user="root",
		password="Internet@2014",
		max_packet_size = 1024 * 1024,
		on_connect = on_connect
	})
	if not db then
		skynet.error("failed to connect db")
		assert(false, "failed to connect db")
	end
	print("success to connect to mysql server")
	
	skynet.dispatch("lua", function (session, address, cmd, ...)
                            print("dbService.dispatch.cmd: " .. cmd)
		local f = CMD[cmd]
		if f then
			skynet.ret(skynet.pack(f(...)))
		else
			skynet.ret(skynet.pack(handler.command(cmd, address, ...)))
		end
	end)

    skynet.register("db_service")
end)
