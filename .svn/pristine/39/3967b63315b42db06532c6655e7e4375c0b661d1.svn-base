--单个玩家的逻辑
local player = {}
player.pid = 0
player.nickName = ""
player.ip = ""
player.roomId = 0
player.site = 0
player.score = 0
player.totalScore = 0

--local  card = {all={}, handed={}, showed={}, rules={}}--all,handed手上的牌(key:id,item:card)，showed显示出来的rule牌(key:ruletype,item:{index,id})，rules手上的分类了的rule牌(key:ruletype,item:{index,id})，rule.none(key:index,item:id)

local function hotRequire(file_name)
	package.loaded[file_name] = nil
	local f = require(file_name)
	return f
end

local cardMgr = hotRequire("logic.playerCardManager")
local zhuangIndex = false
local isready = false



local ruleHelp
local R

function player:setRuleHelp(rr)
	ruleHelp = rr
	cardMgr:setRuleHelp(rr)
end

function player:setR(rr)
	R = rr
	cardMgr:setR(rr)
end

function player:ready(r)
	isready = r
	player.score = 0
end

function player:zhuang(r)
	zhuangIndex = r
end

function player:isReady()
	return isready
end

function player:isZhuang()
	return zhuangIndex
end

function player:setLocalsite(s)
	player.site = s
end

function player:getLocalsite()
	return player.site
end

function player:addScore(s)
	player.score = player.score + s
	player.totalScore = player.totalScore + s
end

function player:getScore()
	return player.score
end
function player:getTotalScore()
	return player.totalScore
end


function player:initCards(mycards, allcards)
	
	cardMgr:init(mycards, allcards)
end

function player:getHandCards()
	return cardMgr:getHandCards()
end

function player:getShowSingleCards()
	return cardMgr:getShowSingleCards()
end

function player:getShowRuleCards()
	return cardMgr:getShowRuleCards()
end



--出牌
function player:payCards(rt, cards, othercard)
	--[[
	local desc = "A("..site..") "
	local cntA = #cardMgr.handed[R.rule.None]
	for k,v in pairs(cardMgr.handed[R.rule.None]) do
		desc = desc .. ((cardMgr.all[v].capital and "大" or "小") .. cardMgr.all[v].value) .. ","
	end
	print(desc)
--]]

	local res = cardMgr:payCards(rt, cards, othercard)
	--[[
	desc = "B("..site..") "
	local cntB = #cardMgr.handed[R.rule.None]
	for k,v in pairs(cardMgr.handed[R.rule.None]) do
		desc = desc .. ((cardMgr.all[v].capital and "大" or "小") .. cardMgr.all[v].value) .. ","
	end
	print(desc)
	
	if cntA == cntB then
		if othercard and rt ~= R.rule.None then
			local test = 0
			local res = cardMgr:payCards(rt, cards, othercard)
		end
	end
--]]
	return res
end

function player:dispatchCardTest(isSelfCard, cardSite, card)
	if isSelfCard then
		return cardMgr:dispatchMyCard(card)
	else
		return cardMgr:dispatchOtherCard(site, cardSite, card)
	end
end


function player:testHupai(card)
	return cardMgr:testHupai(card)
end
function player:getHupaiType()
	return cardMgr:getHupaiType(zhuangIndex)
end


return player
