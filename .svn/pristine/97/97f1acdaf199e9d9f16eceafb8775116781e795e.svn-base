local skynet = require "skynet"
require "skynet.manager"
local netpack = require "netpack"
local datacenter = require "datacenter"
--local CMD = setmetatable({}, { __gc = function() netpack.clear(queue) end })
local CMD = {}
local max_room_player = 4
local players = {}
local rooms = {}--{agent, pids={}} key=roomid

local majorPid = {}
function CMD.playerOnline(agent, fd, pid)
	players[pid] = agent
end
function CMD.playerOffline(agent, pid)
	players[pid] = nil
end

function CMD.playerMsg_multicastNotify(name, pidList, pack)
	for k,v in pairs(pidList) do
		if v > 0 and players[v] then	
			if majorPid[v] then
				skynet.call(players[v], "lua", "msg_notify", name, pack)
			else
				skynet.call(players[v], "lua", "msg_notify", name, pack)
			end
		end
	end
	return 0
end
function CMD.playerMsg_notify(name, pid, pack)
	if players[pid] then
		if majorPid[pid] then
			skynet.call(players[pid], "lua", "msg_notify", name, pack)
		else
			skynet.call(players[pid], "lua", "msg_notify", name, pack)
		end
	end
	return 0
end

------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------

function CMD.isInRoom(pid)
	for k,v in pairs(rooms) do
		for kk,vv in pairs(v.pids) do
			if vv == pid then
				return k
			end
		end
	end
end

function createRobotPlayer(roomid)
	for i=1, 3 do
		local player = skynet.newservice("playerRobotAgent")
		skynet.call(player, "lua", "start", { addr = "192.168.1."..i, gameRoot=skynet.self() })
		
		local token = ""
		for i=1, math.random(1, 10)do token = token .. math.random(0, 9) end
		skynet.call(player, "lua", "totalPush", token)
		
		skynet.call(player, "lua", "joinRoom", roomid)
		
	end
end

function CMD.createRoom(pid, jushu, zhongzhuang, qiangzhihupai)
	if not players[pid] then
		return -1
	end
	
	
	local roomid = datacenter.get("serial_rid", "rid")
	datacenter.set("serial_rid", "rid", roomid+1)

	local room = skynet.newservice ("roomAgent")
	skynet.call(room, "lua", "initRoom", roomid, skynet.self(), jushu, zhongzhuang, qiangzhihupai)
	
	rooms[roomid] = {agent=room, pids={}}
	
	createRobotPlayer(roomid)
	majorPid[pid] = true
	return 0, roomid
end

function CMD.roomExist(rid)
	if not rooms[rid] then
		return -1
	end
	return 0
end

function CMD.playerEnterRoom(rid, pid, nickName, ip)
	if not rooms[rid] then
		return -1
	end
	skynet.call(rooms[rid].agent, "lua", "playerEnterRoom", pid, nickName, ip)
end

function CMD.playReOnline(rid, pid, nickName, ip)
	if players[pid] and rooms[rid] then
		skynet.call(rooms[rid].agent, "lua", "playReOnline", pid, nickName, ip)
	end
end

function CMD.playerReady(rid, pid)
	if players[pid] and rooms[rid] then
		skynet.call(rooms[rid].agent, "lua", "playerReady", pid)
	end
end

function CMD.playerChat(rid, pid, faceid)
	if players[pid] and rooms[rid] then
		skynet.call(rooms[rid].agent, "lua", "playerChat", pid, faceid)
	end
end

function CMD.playerPayCard(rid, pid, rule, cid)
	if players[pid] and rooms[rid] then
		skynet.call(rooms[rid].agent, "lua", "playerPayCard", pid, rule, cid)
	end
end

function init()
	datacenter.set("serial_pid", "pid", 1)
	datacenter.set("serial_rid", "rid", 100001)
	
end

skynet.start(function()
    print("gameRoot service start")
	skynet.dispatch("lua", function (session, address, cmd, ...)
        --print("gameRoot.dispatch.cmd: " .. cmd)
		local f = CMD[cmd]
		if f then
			skynet.ret(skynet.pack(f(...)))
		else
			skynet.ret(skynet.pack(handler.command(cmd, address, ...)))
		end
	end)
  
  init()
  skynet.register("gameRoot")
end)
